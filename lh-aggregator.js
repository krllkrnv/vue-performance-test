import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const REPORTS_DIR = path.join(__dirname, '.lighthouseci');
const OUTPUT_CSV = path.join(__dirname, 'lighthouse-summary.csv');

const average = arr => arr.length ? arr.reduce((a, b) => a + b, 0) / arr.length : 0;

try {
    console.log(`üîç –ü–æ–∏—Å–∫ –æ—Ç—á—ë—Ç–æ–≤ –≤: ${REPORTS_DIR}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(REPORTS_DIR)) {
        throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${REPORTS_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
    }

    const reportFiles = fs.readdirSync(REPORTS_DIR).filter(file =>
        file.endsWith('.report.json') || file.endsWith('.json')
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á—ë—Ç–æ–≤: ${reportFiles.length}`);
    if (reportFiles.length === 0) {
        throw new Error('–§–∞–π–ª—ã –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.');
    }

    const reportsByUrl = {};
    let processedReports = 0;

    for (const file of reportFiles) {
        try {
            const reportPath = path.join(REPORTS_DIR, file);
            const rawData = fs.readFileSync(reportPath, 'utf8');
            const report = JSON.parse(rawData);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!report.finalUrl || !report.audits) {
                console.warn(`‚ö†Ô∏è –§–∞–π–ª ${file} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
                continue;
            }

            const url = report.finalUrl;
            reportsByUrl[url] = reportsByUrl[url] || [];
            reportsByUrl[url].push(report);
            processedReports++;

        } catch (parseError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, parseError.message);
        }
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${processedReports}/${reportFiles.length}`);

    if (processedReports === 0) {
        throw new Error('–ù–∏ –æ–¥–∏–Ω –æ—Ç—á—ë—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    }

    const summary = [];
    const metricsList = ['fcp', 'lcp', 'tbt', 'cls', 'performance'];

    for (const [url, reports] of Object.entries(reportsByUrl)) {
        const metrics = metricsList.reduce((acc, metric) => {
            acc[metric] = [];
            return acc;
        }, {});

        for (const report of reports) {
            try {
                metrics.fcp.push(report.audits['first-contentful-paint']?.numericValue || 0);
                metrics.lcp.push(report.audits['largest-contentful-paint']?.numericValue || 0);
                metrics.tbt.push(report.audits['total-blocking-time']?.numericValue || 0);
                metrics.cls.push(report.audits['cumulative-layout-shift']?.numericValue || 0);
                metrics.performance.push((report.categories.performance?.score || 0) * 100);
            } catch (e) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${url}:`, e.message);
            }
        }

        summary.push({
            URL: url,
            Runs: reports.length,
            FCP_avg: average(metrics.fcp).toFixed(1),
            LCP_avg: average(metrics.lcp).toFixed(1),
            TBT_avg: average(metrics.tbt).toFixed(1),
            CLS_avg: average(metrics.cls).toFixed(3),
            Performance_avg: average(metrics.performance).toFixed(1)
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV
    let csv = 'Scenario,Runs,FCP (ms),LCP (ms),TBT (ms),CLS,Performance (%)\n';

    for (const row of summary) {
        const scenario = row.URL.split('/').pop();
        csv += `${scenario},${row.Runs},${row.FCP_avg},${row.LCP_avg},${row.TBT_avg},${row.CLS_avg},${row.Performance_avg}\n`;
    }

    fs.writeFileSync(OUTPUT_CSV, csv);
    console.log(`\nüéâ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${OUTPUT_CSV}`);
    console.log('========================================');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.table(summary.map(s => ({
        Scenario: s.URL.split('/').pop(),
        Runs: s.Runs,
        FCP: `${s.FCP_avg} ms`,
        LCP: `${s.LCP_avg} ms`,
        TBT: `${s.TBT_avg} ms`,
        CLS: s.CLS_avg,
        Performance: `${s.Performance_avg}%`
    })));

} catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
}
